install.packages('Quandl')
install.packages('Quandl')
Quandl::Quandl.auth('HxBmmuW8x8NMmFM8vB6w')
Quandl::Quandl.api_key('HxBmmuW8x8NMmFM8vB6w')
LIBOR <- Quandl('FED/RILSPDEPM01_N_B',start_date = '2010-06-01', end_date = '2014-06-01')
library(Quandl)
LIBOR <- Quandl('FED/RILSPDEPM01_N_B',start_date = '2010-06-01', end_date = '2014-06-01')
install.packages('quantmod')
library(quantmod)
stocks <- stockSymbols()
d <- read.table("data.csv", header = TRUE, sep = ";")
d <- read.table("C:\Anand\MBA\Job Related\BigData\R\MasteringRForQuant\2078OT_02_codes\data.csv", header = TRUE, sep = ";")
d <- read.table("C:\\Anand\MBA\Job Related\BigData\R\MasteringRForQuant\2078OT_02_codes\data.csv", header = TRUE, sep = ";")
d <- read.table("C:\\Anand\\MBA\\Job Related\\BigData\R\MasteringRForQuant\2078OT_02_codes\data.csv", header = TRUE, sep = ";")
d <- read.table("C:\\Anand\\MBA\\Job Related\\BigData\\R\\MasteringRForQuant\\2078OT_02_codes\\data.csv", header = TRUE, sep = ";")
d[1:7, c(1:5, (ncol(d) - 6):ncol(d))]
View(stocks)
View(d)
d <- d[, colSums(is.na(d)) == 0]
d <- d[, c(T, colMins(d[, 2:ncol(d)]) > 0)]
install.packages('matrixStats')
library('matrixStats')
d <- d[, colSums(is.na(d)) == 0]
d <- d[, c(T, colMins(d[, 2:ncol(d)]) > 0)]
d <- d[, c(T, colMins(d[, 2:ncol(d)]) > 0)]
d <- d[, colSums(is.na(d)) == 0]
d <- d[, c(d, colMins(d[, 2:ncol(d)]) > 0)]
d <- d[, c(T, colMins(d[,2:ncol(d)]) > 0)]
?colMins
d <- d[, c(T, colMins(d, d[,2:ncol(d)]) > 0)]
d <- read.table("C:\\Anand\\MBA\\Job Related\\BigData\\R\\MasteringRForQuant\\2078OT_02_codes\\data.csv", header = TRUE, sep = ";")
d <- colMins(d, na.rm = TRUE)
type(d)
d.type()
typeof(d)
d <- colMins(d[], na.rm = TRUE)
d <- colMins(d[,], na.rm = TRUE)
d[1:7, c(1:5, (ncol(d) - 6):ncol(d))]
d <- colMins(d[,], na.rm = TRUE)
d <- colMins(d, na.rm = TRUE)
as.data.frame(d)
d <- colMins(d, na.rm = TRUE)
do.call(rbind,d)
d <- colMins(d, na.rm = TRUE)
typeof(d)
do.call(rbind,d)
typeof(d)
d[1:7, c(1:5, (ncol(d) - 6):ncol(d))]
num.el <- sapply(d, length)
num.el
typeof(num.el)
res <- cbind(unlist(d), rep(1:length(d), num.el))
typeof(res)
res
lapply(list, function(d) d[!is.na(d)])
d[1:7, c(1:5, (ncol(d) - 6):ncol(d))]
d <- d[, c(T, colMins(d[, 2:ncol(d)]) > 0)]
d <- read.table("C:\\Anand\\MBA\\Job Related\\BigData\\R\\MasteringRForQuant\\2078OT_02_codes\\data.csv", header = TRUE, sep = ";", colClasses = c("Date", rep("numeric",4014)))
d <- d[, colSums(is.na(d)) == 0]
d <- d[, c(T, colMins(d[, 2:ncol(d)]) > 0)]
typeof(d)
View(d)
View(d)
lapply(list, function(d) d[!is.na(d)])
View(d)
View(d)
p <- d[, 3:ncol(d)]
r <- log(p[2:nrow(p), ] / p[1:(nrow(p) - 1), ])
r <- r[, runif(nrow(r)) < 0.1]
r <- r[, runif(nrow(r)) < 0.1]
r <- log(p[2:nrow(p), ] / p[1:(nrow(p) - 1), ])
r <- r[, runif(nrow(r)) < 0.1]
pca <- princomp(r)
plot(pca$sdev)
factanal(r, 5)
install.packages("xlsx")
library(xlsx)
library(xlsx)
library("xlsx")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', 'a.xlsx')
dat <- read.xlsx2(
"a.xlsx",
sheetIndex = 1,
startRow   = 18,
endRow     = 23,
colIndex   = 7:15
)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', 'a.xlsx', mode='wb')
dat <- read.xlsx2(
"a.xlsx",
sheetIndex = 1,
startRow   = 18,
endRow     = 23,
colIndex   = 7:15
)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
install.packages("XML")
library(XML)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', 'res.xml')
xml_file <- system.file("extdata", "res.xml", package = "learningr")
r_options <- xmlParse(xml_file)
r_option <- xmlParse(xml_file, useInternalNodes = FALSE)
require(XML)
data <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
swirl()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
uscsDb <- dbConnect(MySQL(), user = 'genome', host="genome-mysql.cse.ucsu.edu")
library(RMySQL)
uscsDb <- dbConnect(MySQL(), user = 'genome', host="genome-mysql.cse.ucsu.edu")
uscsDb <- dbConnect(MySQL(), user = 'genome', host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user = 'genome', host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "Show Databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user = 'genome', db= "hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
hg19 <- dbConnect(MySQL(), user = 'genome', db= "hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
dbListFields(hg19, "affyU133Plus2")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("rhdf5")
libray("rhdf5")
library("rhdf5")
created <- h5createFile("example.h5")
created
con = url("http://sholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlcode
htmlcode <- reallines(con)
htmlcode <- readlines(con)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "6121e82f926bb829b0b7",
secret = "505cd5a3f921c8f92106efaf49cbc917510eee29")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("Rcpp")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("Rcpp")
library("Rcpp")
library("Rcpp")
install.packages("Rcpp")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
htmlcode
#con = url("http://sholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode <- readlines(con)
close(con)
htmlcode
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode <- readlines(con)
htmlcode <- readLines(con)
v
htmlcode
nchar(htmlcode[10,])
nrows(htmlcode)
nrow(htmlcode)
typeof(htmlcode)
htmlcode[,10]
dim(htmlcode)
htmlcode[10]
nchar(htmlcode[10])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
sum(x$V4)
sum(x$V5)
library(dplyr)
install.packages("forecast", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(dplyr)
install.packages("Rcpp", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
.Last <- function() system("R --vanilla")
q("no")
rm(list = setdiff(ls(), lsf.str()))
getwd()
if(!file.exists("./data")){dir.create("./data")}
getwd()
names(cameraData)
names(cameraData)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54—2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.csv",method="curl")
fileUrl <- 'http://data.baltimorecity.gov/api/views/dz54—2aru/rows.csv?accessType=DOWNLOAD'
download.file(fileUrl,destfile="./data/cameras.csv",method="curl")
names(cameraData)
download.file(fileUrl,destfile="./data/cameras.csv",method="wb")
download.file(fileUrl,destfile="./data/cameras.csv",method="auto")
fileUrl <- 'https://data.baltimorecity.gov/api/views/dz54—2aru/rows.csv?accessType=DOWNLOAD'
download.file(fileUrl,destfile="./data/cameras.csv",method="curl")
names(cameraData)
if(!file.exists("./data")){dir.create("./data")}
source('C:/Anand/Personal/MBA/Job Related/BigData/Data Science/Coursera Course/Specialization/Getting and Cleaning Data/Week 4.R', encoding = 'UTF-8')
download.file(fileUrl,destfile="./data/cameras.csv",method="wb")
download.file(fileUrl,destfile="./data/cameras.csv",method="curl")
download.file(fileUrl,destfile="./data/cameras.csv")
fileUrl <- 'http://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD'
download.file(fileUrl,destfile="./data/cameras.csv")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
install.packages("ggplot2")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
ccolors()
colors()
seq(0,1,len=10)
pal(seq(0,1,len=10))
swirl
library("swirl")
swril()
swirl()
?InstallCourses
install_from_swirl("Exploratory_Data_Analysis", dev = FALSE, mirror = "github")
swirl()
View(dataFrame)
View(dataFrame)
dist(dataFrame)
hc <- hclust(distcy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=4, col="blue")
abline(h=.4, col="blue")
abline(h=.4, col="red")
5
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, cm.colors(25))
heatmap(dataMatrix, cm.colors(25))
heatmap(dataMatrix)
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(dendro)
plot(denmt)
distmt
library("swirl")
swirl()
getwd()
setwd('C:/Users/Anand/Documents/GitHub/RepData_PeerAssessment1')
getwd()
?read.csv
ls ~l
ls -l
rm(list = ls())
df <- read.csv("activity.csv", header = TRUE)
names(df)
class(df$steps)
class(df$date)
class(df$interval)
head(df$date)
df <- read.csv("activity.csv", header = TRUE, as.is = TRUE)
class(df$date)
class(df)
class(names(df))
class(df$steps)
class(df$interval)
df[,2] <- strptime(df[,2], "%d-%m-%Y")
df[,2] <- as.POSIXct(strptime(df[,2], "%d-%m-%Y"))
class(df$date)
View(df)
View(df)
df[,2] <- as.POSIXct(strptime(df[,2], "%d-%m-%Y"))
df <- read.csv("activity.csv", header = TRUE, as.is = TRUE)
as.date(df[1,2])
as.Date(df[1,2])
df[,2] <- as.Date(df[,2])
View(df)
View(df)
class(df$date)
dStps <- sapply(split(df, df$date), function(x) sum(x$steps))
names(dStps)
head(dStps)
hist(dStps)
mean(dStps)
mean(dStps, rm.na=TRUE)
class(dStps)
colMeans(dStps)
typeof(dStps)
dStps[1]
dStps[3]
colMeans(dStps[])
dStps <- sapply(split(df, df$date), function(x) sum(x$steps), simplify = TRUE)
typeof(dStps)
names(dStps)
dStps <- sapply(split(df, df$date), simplify = TRUE, function(x) sum(x$steps))
typeof(dStps)
sum(dStps)
sum(dStps[1:3])
sum(dStps, rm.NA=TRUE)
is.vector(dStps)
mean(dStps)
sapply(dStps, mean)
?mean
mean(dStps, na.rm = TRUE)
hist(dStps)
median(dStps, na.rm = TRUE)
plot(df$date, df$steps)
plot(df$interval, df$steps)
lines(df$interval, df$steps, type = l)
lines(df$interval, df$steps, type = l)
lines(df$interval, df$steps, type = p)
plot(df$interval, df$steps, type=l)
plot(df$interval, df$steps, type="l")
IStps <- sapply(split(df, df$interval), function(x) mean(x$steps))
typeof(IStps)
head(IStps)
IStps <- sapply(split(df, df$interval), function(x) mean(x$steps, na.rm = TRUE))
hist(IStps)
head(IStps)
plot(names(IStps), IStps, type="l")
plot(names(IStps), IStps, type="l", xlab="Interval", ylab = "Average Steps per interval", main = "Average steps taken during the day")
plot(names(IStps), IStps, type="l", xlab="Interval", ylab = "Average Steps", main = "Average steps taken during the day")
which.max(IStps)
835*5/(60*24)
60*24
63
dfMisng <- df[rowSums(is.na(DF)) > 0,]
dfMisng <- df[rowSums(is.na(df)) > 0,]
View(dfMisng)
View(dfMisng)
row(dfMisng)
nrow
nrow(dfMisng)
IStps[,6]
IStps[6]
IStps[288]
head(colnames)
head(colnames(IStps))
names(IStps)
names(IStps)[5]
dim(df)[1]
if(is.na(df[1,1])
)
warning("argument is not a matrix: returning NA")
dfNew <- df
df[1,3]
df[2,3]
IStps[df[2,3]]
grep("5", IStps)
grep("5", names(IStps), value = TRUE)
grep("^5", names(IStps), value = TRUE)
grep("^5$", names(IStps), value = TRUE)
grep("^2355$", names(IStps), value = TRUE)
grep("^105$", names(IStps), value = TRUE)
grep("^df[2,1]$", names(IStps), value = TRUE)
grep("^"+df[2,1]+"$", names(IStps), value = TRUE)
c("^", df[2,1], "$")
paste("^", df[2,1], "$")
paste("^", as.string(df[2,1]), "$")
as.character(df[2,1])
as.character(df[2,3])
paste("^", df[2,3], "$")
paste("^", df[2,3], "$", sep="")
grep("^105$", names(IStps), value = TRUE)
grep(paste("^", df[2,3], "$", sep=""), names(IStps), value = TRUE)
IStps[grep(paste("^", df[2,3], "$", sep=""), names(IStps), value = TRUE)]
for(i in 1:dim(dfNew)[1])  # for each row
{
if (is.na(dfNew[i,1])){
dfNew[i,1] <- IStps[grep(paste("^", df[i,3], "$", sep=""), names(IStps), value = TRUE)]
}
}
View(dfNew)
View(dfNew)
IStps[288]
dStpsNew <- sapply(split(dfNew, dfNew$date), function(x) sum(x$steps))
hist(dStpsNew)
par(1,2)
par(1,2)
mean(dStpsNew, na.rm=TRUE)
median(dStpsNew, na.rm=TRUE)
weekdays(dfNew[3,2])
?weekdays
weekdays(dfNew[10,2])
weekdays(dfNew["1622",2])
library(timeDate)
isWeekday(dfNew[1622,2], wday=1:5)
isWeekday(dfNew[3,2], wday=1:5)
if(isWeekday(dfNew[3,2], wday=1:5)){“weekday”}
if(isWeekday(dfNew[3,2], wday=1:5)){return(“weekday”)}
if(isWeekday(dfNew[3,2], wday=1:5))
{}
weekend <- chron::is.weekend(df$date)
library(chron)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
dfNew$wDay <- factor((weekdays(dfNew$date) %in% weekdays1), levels=c(FALSE, TRUE), labels=c('weekend', 'weekday')
)
split(dfNew, dfNew$wDay)
df1 <- split(dfNew, dfNew$wDay)
names(df1)
df1[1]
nrow(df1[1])
nrow(df1[2])
names(df1)
nrows(df1[1])
nrow(df1["weekend"])
df1[1]
df1[2]
wkday <- df1[2]
wkEnd <- df[1]
wkEnd <- df1[1]
wkEnd <- df1[1][]
df1[1]
wkEnd <- df1[2]
names(wkEnd)
wkEnd <- df1[[2]]
View(wkEnd)
View(wkEnd)
wkEnd <- df1[[1]]
wkday <- df1[[2]]
View(wkEnd)
View(wkday)
wkDayIStps <- sapply(split(wkday, wkday$interval), function(x) mean(x$steps))
wkEndIStps <- sapply(split(wkEnd, wkEnd$interval), function(x) mean(x$steps))
plot(names(wkDayIStps), wkDayIStps, type="l", xlab="Interval", ylab = "Average Steps", main = "Average)
)
plot(names(wkDayIStps), wkDayIStps, type="l", xlab="Interval", ylab = "Average Steps", main = "Average)
plot(names(wkDayIStps), wkDayIStps, type="l", xlab="Interval", ylab = "Average Steps", main = "Average")
par(2,1)
par(mfrow=c(2,1))
plot(names(wkDayIStps), wkDayIStps, type="l", xlab="Interval", ylab = "Average Steps", main = "Week Day - Average")
plot(names(wkEndIStps), wkEndIStps, type="l", xlab="Interval", ylab = "Average Steps", main = "Week End - Average")
pwd()
getwd()
?knitrtohtml()
?knit2html()
?knit2html
library(knitr)
install.packages(knitr)
install.packages("knitr")
knit2html
?knit2html
library(knitr)
?knit2html
knit2html("PA1_template.rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.RMD")
install.packages("rmarkdown", type = "source")
knit2html("PA1_template.RMD")
render_html("PA1_template.RMD")
render("PA1_template.RMD")
knit2html("PA1_template.RMD")
rmarkdown::render("PA1_template.RMD")
rmarkdown::render("PA1_template.RMD")
rmarkdown::render("PA1_template.RMD")
